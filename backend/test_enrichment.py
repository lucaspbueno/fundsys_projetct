#!/usr/bin/env python3
"""
Script de teste para o sistema de enriquecimento ANBIMA
"""

import asyncio
import sys
import os

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.anbima_enrichment import AnbimaEnrichmentService

async def test_anbima_enrichment():
    """Testa o servi√ßo de enriquecimento da ANBIMA"""
    print("üß™ Testando servi√ßo de enriquecimento ANBIMA...")
    
    service = AnbimaEnrichmentService()
    
    # Teste com um c√≥digo de ativo fict√≠cio
    test_cod_ativo = "CRA02300FFL"  # Exemplo de c√≥digo CRA
    
    print(f"üì° Testando enriquecimento para ativo: {test_cod_ativo}")
    
    try:
        resultado = service.enrich_ativo(test_cod_ativo)
        
        if resultado:
            print("‚úÖ Dados obtidos com sucesso!")
            print(f"üìä Resultado: {resultado}")
        else:
            print("‚ö†Ô∏è  Nenhum dado encontrado (pode ser normal se o ativo n√£o existir na ANBIMA)")
            
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
    
    print("\nüîç Testando m√∫ltiplos ativos...")
    
    # Teste com m√∫ltiplos ativos
    cod_ativos_teste = ["CRA02300FFL", "CRA02400FFL", "CRA02500FFL"]
    
    try:
        resultados = service.enrich_multiple_ativos(cod_ativos_teste, delay=0.5)
        
        print(f"üìà Resultados para {len(cod_ativos_teste)} ativos:")
        for cod_ativo, resultado in resultados.items():
            status = "‚úÖ" if resultado and not resultado.get('erro') else "‚ùå"
            print(f"  {status} {cod_ativo}: {resultado}")
            
    except Exception as e:
        print(f"‚ùå Erro durante teste m√∫ltiplo: {e}")

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("üîß Testando imports...")
    
    try:
        from app.models.ativo_enriquecido import AtivoEnriquecido
        from app.DTOs.ativo_enriquecido import AtivoEnriquecidoDTO
        from app.services.enrichment_service import EnrichmentService
        from app.controllers.enrichment import enrichment_routes
        from app.schemas.enrichment import EnrichmentStatusResponse
        
        print("‚úÖ Todos os m√≥dulos importados com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False

async def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ Iniciando testes do sistema de enriquecimento ANBIMA")
    print("=" * 60)
    
    # Teste 1: Imports
    if not test_imports():
        print("‚ùå Falha nos imports. Verifique as depend√™ncias.")
        return
    
    print("\n" + "=" * 60)
    
    # Teste 2: Servi√ßo ANBIMA
    await test_anbima_enrichment()
    
    print("\n" + "=" * 60)
    print("‚úÖ Testes conclu√≠dos!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Execute a migra√ß√£o: poetry run alembic upgrade head")
    print("2. Inicie o servidor: poetry run python main.py")
    print("3. Acesse o frontend e teste o toggle de dados enriquecidos")

if __name__ == "__main__":
    asyncio.run(main())

